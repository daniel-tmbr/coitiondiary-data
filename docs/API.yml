swagger: '2.0'
info:
  description: This is the API specification of Coition Diary's server.
  version: 1.0.0
  title: Coition Diary
  termsOfService: 'http://danieltmbr.github.io/coitiondiary/terms/'
  contact:
    email: daniel@tmbr.me
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: api.cd.tmbr.me
basePath: /v1
tags:
  - name: auth
    description: Operations about user
  - name: coition
    description: Everything about coitions.
  - name: user
    description: Operations about user
schemes:
  - https
paths:
  /auth/register:
    post:
      tags:
        - auth
      summary: Create account
      description: Username & email should be unique. Email is optional.
      operationId: registerUser
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: user
          in: formData
          description: User json to pass to server
          required: true
          type: string
        - name: file
          in: formData
          description: Avatar to upload
          required: false
          type: file
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/User'
        '405':
          description: Validation exception
  /auth/login:
    post:
      tags:
        - auth
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Username & password
          required: true
          schema:
            $ref: '#/definitions/Login'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
          headers:
            X-Access-Token:
              type: string
              description: Access token
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        '405':
          description: Invalid username/password supplied
  /auth/logout:
    get:
      tags:
        - auth
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      produces:
        - application/json
      parameters: []
      responses:
        default:
          description: successful operation
  /coitions:
    get:
      tags:
        - coition
      summary: List all coitions of the logged in user
      description: ''
      operationId: getCoitions
      produces:
        - application/json
      parameters:
        - in: query
          name: since
          description: >-
            Fetch coitions that were created/updated after this date. Empty
            meand fetch all.
          required: false
          type: string
          format: date-time
      responses:
        '200':
          description: Successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Coition'
        '401':
          description: Unauthorized
      security:
        - Bearer: []
    post:
      tags:
        - coition
      summary: Add a new coition to the diary
      description: ''
      operationId: addCoition
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Coition object that needs to be added to the diary
          required: true
          schema:
            $ref: '#/definitions/Coition'
      responses:
        '200':
          description: Coition was added successfully.
          schema:
            $ref: '#/definitions/Coition'
        '400':
          description: Invalid ID supplied
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Coition not found
        '405':
          description: Validation exception
      security:
        - Bearer: []
    put:
      tags:
        - coition
      summary: Update an existing coition
      description: ''
      operationId: updateCoition
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Coition object that needs to be updated in the diary
          required: true
          schema:
            $ref: '#/definitions/Coition'
      responses:
        '200':
          description: Coition was updated successfully.
          schema:
            $ref: '#/definitions/Coition'
        '400':
          description: Invalid ID supplied
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Coition not found
        '405':
          description: Validation exception
      security:
        - Bearer: []
  '/coitions/{id}':
    get:
      tags:
        - coition
      summary: Get coition by id.
      operationId: getCoitionById
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of a coition that needs to be fetched
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/Coition'
        '400':
          description: Invalid ID supplied
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Coition not found
      security:
        - Bearer: []
    delete:
      tags:
        - coition
      summary: Deletes a coition
      description: ''
      operationId: deleteCoition
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Coition id to delete
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Coition was deleted successfuly
          schema:
            $ref: '#/definitions/Coition'
        '400':
          description: Invalid ID supplied
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Pet not found
      security:
        - Bearer: []
  /users:
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '400':
          description: Invalid user supplied
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User not found
      security:
        - Bearer: []
  '/users/{id}':
    get:
      tags:
        - user
      summary: Get user by id
      description: ''
      operationId: getUserById
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The name that needs to be fetched.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - Bearer: []
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of a user that needs to be deleted
          required: true
          type: string
      responses:
        '400':
          description: Invalid id supplied
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User not found
      security:
        - Bearer: []
  '/users/{id}/uploadImage':
    post:
      tags:
        - user
      summary: uploads an image
      description: ''
      operationId: uploadFile
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of user to update
          required: true
          type: integer
          format: int64
        - name: file
          in: formData
          description: Avatar to upload
          required: false
          type: file
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid id supplied
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User not found
      security:
        - Bearer: []
  '/users/find/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      produces:
        - application/json
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/MiniUser'
        '400':
          description: Invalid username supplied
        '401':
          description: Unauthorized
        '404':
          description: User not found
      security:
        - Bearer: []
  /users/dummy:
    post:
      tags:
        - user
      summary: Create dummy partner.
      description: Name should be provided.
      operationId: addDummyUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Dummy user object
          required: true
          schema:
            $ref: '#/definitions/DummyUser'
      responses:
        '200':
          description: Partner was added successfuly
          schema:
            $ref: '#/definitions/DummyUser'
      security:
        - Bearer: []
    put:
      tags:
        - user
      summary: Updates dummy partner
      description: This can only be done by the logged in user.
      operationId: updateDummyUser
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Dummy user object
          required: true
          schema:
            $ref: '#/definitions/DummyUser'
      responses:
        '200':
          description: Partner was edited successfuly
          schema:
            $ref: '#/definitions/DummyUser'
        '400':
          description: Invalid user supplied
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User not found
      security:
        - Bearer: []
  /users/dummy/merge:
    post:
      tags:
        - user
      summary: Merge dummy partner with valid user
      description: This can only be done by the logged in user.
      operationId: mergeDummyUser
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Dummy user object
          required: true
          schema:
            $ref: '#/definitions/MergeUsers'
      responses:
        '200':
          description: Partner was edited successfuly
          schema:
            $ref: '#/definitions/MiniUser'
        '400':
          description: Invalid ids supplied
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User or dummy user not found not found
      security:
        - Bearer: []
securityDefinitions:
  Bearer:
    type: apiKey
    name: x-access-token
    in: header
definitions:
  User:
    type: object
    properties:
      id:
        type: string
        format: uuid
      username:
        type: string
      name:
        type: string
      avatar:
        type: string
        description: Url of the avatar
      email:
        type: string
      gender:
        type: string
        enum:
          - male
          - female
          - trans
      birthday:
        type: string
        format: date
      country:
        type: string
      city:
        type: string
      profession:
        type: string
      facebook:
        $ref: '#/definitions/SocialProfile'
      google:
        $ref: '#/definitions/SocialProfile'
  MiniUser:
    type: object
    properties:
      id:
        type: string
        format: uuid
      username:
        type: string
      name:
        type: string
      avatar:
        type: string
        description: Url of the avatar
  DummyUser:
    type: object
    properties:
      id:
        type: string
        format: uuid
      createdBy:
        type: string
        format: uuid
        description: Id of the user who created this partner
      name:
        type: string
  MergeUsers:
    type: object
    properties:
      userId:
        type: string
        format: uuid
        description: Valid user id
      partnerId:
        type: string
        format: uuid
        description: Dummy partner id
  Coition:
    type: object
    required:
      - date
    properties:
      id:
        type: string
        format: uuid
      name:
        type: string
        example: Birthday sex
      date:
        type: string
        format: date-time
        example: '2017-06-25T12:55+0000'
      createdBy:
        $ref: '#/definitions/MiniUser'
      partners:
        type: array
        items:
          $ref: '#/definitions/MiniUser'
      location:
        $ref: '#/definitions/Location'
      note:
        type: string
      media:
        type: array
        items:
          $ref: '#/definitions/Media'
      tags:
        type: array
        items:
          $ref: '#/definitions/Tag'
  Location:
    type: object
    properties:
      id:
        type: string
        format: uuid
      name:
        type: string
        description: Name of the given location.
      address:
        $ref: '#/definitions/Address'
      coordinates:
        $ref: '#/definitions/Coordinates'
  Address:
    type: object
    description: Address of a location.
    properties:
      country:
        type: string
      city:
        type: string
      zip:
        type: string
      address:
        type: string
  Coordinates:
    type: object
    description: Coordinates of a location.
    properties:
      latitude:
        type: number
        format: double
      longitude:
        type: number
        format: double
  Media:
    type: object
    properties:
      id:
        type: string
        format: uuid
      url:
        type: string
      thumbnail:
        type: string
      duration:
        type: integer
        description: Only available for videos.
      type:
        type: string
        description: Meida type
        enum:
          - image
          - video
  SocialProfile:
    type: object
    properties:
      userId:
        type: string
        format: uuid
      userName:
        type: string
      name:
        type: string
      email:
        type: string
      avatar:
        type: string
  Tag:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
  Login:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
externalDocs:
  description: Find out more about Coition Diary
  url: >-
    https://github.com/daniel-tmbr/coitiondiary-data/blob/master/docs/specification.md
